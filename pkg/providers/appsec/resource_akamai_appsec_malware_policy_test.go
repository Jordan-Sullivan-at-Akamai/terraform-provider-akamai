package appsec

import (
	"encoding/json"
	"testing"

	"github.com/akamai/AkamaiOPEN-edgegrid-golang/v2/pkg/appsec"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/stretchr/testify/mock"
)

func TestAccAkamaiMalwarePolicy_res_basic(t *testing.T) {
	t.Run("match by MalwarePolicy ID", func(t *testing.T) {
		client := &mockappsec{}

		// Messages for test step 1
		configResponse := appsec.GetConfigurationResponse{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResConfiguration/LatestConfiguration.json"), &configResponse)
		createBody := appsec.MalwarePolicyBody{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/CreateMalwarePolicy.json"), &createBody)
		createResponse := appsec.MalwarePolicyResponse{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/MalwarePolicy.json"), &createResponse)
		getResponse := appsec.MalwarePolicyResponse{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/MalwarePolicy.json"), &getResponse)

		// Calls made during test step 1
		client.On("GetConfiguration", mock.Anything,
			appsec.GetConfigurationRequest{ConfigID: 43253},
		).Return(&configResponse, nil)
		client.On("CreateMalwarePolicy",
			mock.Anything,
			appsec.CreateMalwarePolicyRequest{ConfigID: 43253, ConfigVersion: 7, Policy: &createBody},
		).Return(&createResponse, nil)
		client.On("GetMalwarePolicy", // during Create
			mock.Anything,
			appsec.GetMalwarePolicyRequest{ConfigID: 43253, ConfigVersion: 7, MalwarePolicyID: 134644},
		).Return(&getResponse, nil).Once()
		client.On("GetMalwarePolicy", // after Create
			mock.Anything,
			appsec.GetMalwarePolicyRequest{ConfigID: 43253, ConfigVersion: 7, MalwarePolicyID: 134644},
		).Return(&getResponse, nil).Once()

		// Messages for test step 2
		updateBody := appsec.MalwarePolicyBody{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/UpdateMalwarePolicy.json"), &updateBody)
		updateResponse := appsec.MalwarePolicyResponse{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/MalwarePolicyUpdated.json"), &updateResponse)
		getUpdatedResponse := appsec.MalwarePolicyResponse{}
		json.Unmarshal(loadFixtureBytes("testdata/TestResMalwarePolicy/MalwarePolicyUpdated.json"), &getUpdatedResponse)

		// Calls made during test step 2
		// client.On("UpdateMalwarePolicy",
		// 	mock.Anything,
		// 	appsec.UpdateMalwarePolicyRequest{ConfigID: 43253, ConfigVersion: 7, MalwarePolicyID: 134644, Policy: &updateBody},
		// ).Return(&updateResponse, nil)
		client.On("GetMalwarePolicy",
			mock.Anything,
			appsec.GetMalwarePolicyRequest{ConfigID: 43253, ConfigVersion: 7, MalwarePolicyID: 134644},
		).Return(&getUpdatedResponse, nil)

		useClient(client, func() {
			resource.Test(t, resource.TestCase{
				IsUnitTest: true,
				Providers:  testAccProviders,
				Steps: []resource.TestStep{
					{
						Config: loadFixtureString("testdata/TestResMalwarePolicy/match_by_id.tf"),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr("akamai_appsec_malware_policy.test", "id", "43253:134644"),
						),
					},
					{
						Config: loadFixtureString("testdata/TestResMalwarePolicy/update_by_id.tf"),
						Check: resource.ComposeAggregateTestCheckFunc(
							resource.TestCheckResourceAttr("akamai_appsec_malware_policy.test", "id", "43253:134644"),
						),
					},
				},
			})
		})

		client.AssertExpectations(t)
	})
}
